"""Fix missing roles table

Revision ID: d26c12b89797
Revises: df3a3a818ae8
Create Date: 2025-03-31 23:02:26.018588

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd26c12b89797'
down_revision: Union[str, None] = 'df3a3a818ae8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def table_exists(table_name):
    conn = op.get_bind()
    return conn.execute(
        sa.text(f"SELECT to_regclass('{table_name}')")
    ).scalar() is not None

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('proposals') if table_exists('proposals') else None
    op.drop_table('profiles') if table_exists('proposals') else None
    op.drop_table('profile_skills') if table_exists('proposals') else None
    op.drop_table('sub_categories') if table_exists('proposals') else None
    op.drop_table('order_milestones') if table_exists('proposals') else None
    op.drop_table('transactions') if table_exists('proposals') else None
    op.drop_table('categories') if table_exists('proposals') else None
    op.drop_table('milestones') if table_exists('proposals') else None
    op.drop_table('skills') if table_exists('proposals') else None
    op.drop_table('jobs') if table_exists('proposals') else None
    op.drop_table('reviews') if table_exists('proposals') else None
    op.drop_table('orders') if table_exists('proposals') else None
    op.drop_table('users') if table_exists('proposals') else None
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sa.INTEGER(), server_default=sa.text("nextval('users_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('wallet_public_address', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('wallet_type', postgresql.ENUM('Lace', 'Yoroi', 'Daedalus', 'Nami', 'Flint', 'WalletConnect', 'Exodus', 'AdaLite', 'CardanoWalletConnect', 'TrustWallet', 'Typhon', 'Blockfrost', 'GeroWallet', name='wallettype'), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_type', postgresql.ENUM('Unknown', 'Freelancer', 'Client', name='usertype'), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    sa.UniqueConstraint('wallet_public_address', name='users_wallet_public_address_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('orders',
    sa.Column('order_id', sa.INTEGER(), server_default=sa.text("nextval('orders_order_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('job_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], name='orders_client_id_fkey'),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name='orders_job_id_fkey'),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name='orders_milestone_id_fkey'),
    sa.PrimaryKeyConstraint('order_id', name='orders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('reviews',
    sa.Column('review_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('reviewee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reviewer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.NUMERIC(precision=2, scale=1), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['reviewee_id'], ['users.user_id'], name='reviews_reviewee_id_fkey'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.user_id'], name='reviews_reviewer_id_fkey'),
    sa.PrimaryKeyConstraint('review_id', name='reviews_pkey')
    )
    op.create_table('jobs',
    sa.Column('job_id', sa.INTEGER(), server_default=sa.text("nextval('jobs_job_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sub_category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('freelancer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('SERVICE', 'REQUEST', name='jobtype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Pending_Approval', 'Approved', 'Draft', 'In_Progress', 'Completed', 'Canceled', name='jobstatus'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], name='jobs_client_id_fkey'),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.user_id'], name='jobs_freelancer_id_fkey'),
    sa.ForeignKeyConstraint(['sub_category_id'], ['sub_categories.sub_category_id'], name='jobs_sub_category_id_fkey'),
    sa.PrimaryKeyConstraint('job_id', name='jobs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('skills',
    sa.Column('skill_id', sa.INTEGER(), server_default=sa.text("nextval('skills_skill_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('skill', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('skill_id', name='skills_pkey'),
    sa.UniqueConstraint('skill', name='skills_skill_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('milestones',
    sa.Column('milestone_id', sa.INTEGER(), server_default=sa.text("nextval('milestones_milestone_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('job_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('milestone_tx_hash', sa.VARCHAR(length=4096), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('freelancer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('milestone_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reward_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('client_approved', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('freelancer_approved', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Draft', 'In_Progress', 'Completed', name='milestonestatus'), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('Service_Milestone', 'Request_Milestone', name='milestonetype'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], name='milestones_client_id_fkey'),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.user_id'], name='milestones_freelancer_id_fkey'),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name='milestones_job_id_fkey'),
    sa.PrimaryKeyConstraint('milestone_id', name='milestones_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('categories',
    sa.Column('category_id', sa.INTEGER(), server_default=sa.text("nextval('categories_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('category_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('category_id', name='categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('transactions',
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('token_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('receiver_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('freelancer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], name='transactions_client_id_fkey'),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.user_id'], name='transactions_freelancer_id_fkey'),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name='transactions_milestone_id_fkey'),
    sa.PrimaryKeyConstraint('transaction_id', name='transactions_pkey')
    )
    op.create_table('order_milestones',
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name='order_milestones_milestone_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.order_id'], name='order_milestones_order_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('order_id', 'milestone_id', name='order_milestones_pkey')
    )
    op.create_table('sub_categories',
    sa.Column('sub_category_id', sa.INTEGER(), server_default=sa.text("nextval('sub_categories_sub_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sub_category_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sub_category_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], name='sub_categories_category_id_fkey'),
    sa.PrimaryKeyConstraint('sub_category_id', name='sub_categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('profile_skills',
    sa.Column('profile_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('skill_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.profile_id'], name='profile_skills_profile_id_fkey'),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.skill_id'], name='profile_skills_skill_id_fkey'),
    sa.PrimaryKeyConstraint('profile_id', 'skill_id', name='profile_skills_pkey')
    )
    op.create_table('profiles',
    sa.Column('profile_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('bio', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='profiles_user_id_fkey'),
    sa.PrimaryKeyConstraint('profile_id', name='profiles_pkey'),
    sa.UniqueConstraint('user_id', name='profiles_user_id_key')
    )
    op.create_table('proposals',
    sa.Column('proposal_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('job_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('freelancer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.user_id'], name='proposals_freelancer_id_fkey'),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], name='proposals_job_id_fkey'),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name='proposals_milestone_id_fkey'),
    sa.PrimaryKeyConstraint('proposal_id', name='proposals_pkey')
    )
    # ### end Alembic commands ###
