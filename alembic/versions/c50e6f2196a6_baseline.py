"""baseline

Revision ID: c50e6f2196a6
Revises: ed7da1ad69ed
Create Date: 2025-06-18 11:26:15.591433

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c50e6f2196a6'
down_revision: Union[str, None] = 'ed7da1ad69ed'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('wallet_types')
    op.drop_table('request_milestone_association')
    op.drop_table('transactions')
    op.drop_table('proposal_status')
    op.drop_table('service_milestone_association')
    op.drop_table('milestone_status')
    op.drop_table('sub_categories')
    op.drop_table('milestones')
    op.drop_table('proposal_milestone_association')
    op.drop_table('scripts')
    op.drop_table('services')
    op.drop_table('profiles')
    op.drop_table('users')
    op.drop_table('utxos')
    op.drop_table('proposals')
    op.drop_table('service_status')
    op.drop_table('requests')
    op.drop_table('reviews')
    op.drop_table('order_status')
    op.drop_table('categories')
    op.drop_table('order_milestone_association')
    op.drop_table('profile_skills')
    op.drop_table('roles')
    op.drop_table('orders')
    op.drop_table('request_status')
    op.drop_table('skills')
    op.drop_table('pending_transactions')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('pending_transactions',
    sa.Column('pending_transaction_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tx_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'confirmed', 'failed', 'timeout', name='pending_tx_status_enum'), autoincrement=False, nullable=False),
    sa.Column('action_type', postgresql.ENUM('milestone_creation', 'milestone_approval', 'milestone_payment', name='pending_tx_context_enum'), autoincrement=False, nullable=False),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('submission_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_poll_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('confirmation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('script_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name=op.f('pending_transactions_milestone_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['script_id'], ['scripts.script_id'], name=op.f('pending_transactions_script_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('pending_transaction_id', name=op.f('pending_transactions_pkey')),
    sa.UniqueConstraint('tx_hash', name=op.f('pending_transactions_tx_hash_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('skills',
    sa.Column('skill_id', sa.INTEGER(), server_default=sa.text("nextval('skills_skill_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('skill', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('skill_id', name='skills_pkey'),
    sa.UniqueConstraint('skill', name='skills_skill_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('request_status',
    sa.Column('request_status_id', sa.INTEGER(), server_default=sa.text("nextval('request_status_request_status_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('request_status_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('request_status_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('request_status_id', name='request_status_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('orders',
    sa.Column('order_id', sa.INTEGER(), server_default=sa.text("nextval('orders_order_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('order_status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], name='orders_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['order_status_id'], ['order_status.order_status_id'], name='orders_order_status_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], name='orders_service_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('order_id', name='orders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('roles',
    sa.Column('role_id', sa.INTEGER(), server_default=sa.text("nextval('roles_role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('role_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('role_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('role_id', name='roles_pkey'),
    sa.UniqueConstraint('role_name', name='roles_role_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('profile_skills',
    sa.Column('profile_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('skill_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.profile_id'], name=op.f('profile_skills_profile_id_fkey')),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.skill_id'], name=op.f('profile_skills_skill_id_fkey')),
    sa.PrimaryKeyConstraint('profile_id', 'skill_id', name=op.f('profile_skills_pkey'))
    )
    op.create_table('order_milestone_association',
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name=op.f('order_milestone_association_milestone_id_fkey')),
    sa.ForeignKeyConstraint(['order_id'], ['orders.order_id'], name=op.f('order_milestone_association_order_id_fkey'))
    )
    op.create_table('categories',
    sa.Column('category_id', sa.INTEGER(), server_default=sa.text("nextval('categories_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('category_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('category_id', name='categories_pkey'),
    sa.UniqueConstraint('category_name', name='categories_category_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('order_status',
    sa.Column('order_status_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_status_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('order_status_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('order_status_id', name=op.f('order_status_pkey'))
    )
    op.create_table('reviews',
    sa.Column('review_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('reviewee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reviewer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.NUMERIC(precision=2, scale=1), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['reviewee_id'], ['users.user_id'], name=op.f('reviews_reviewee_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.user_id'], name=op.f('reviews_reviewer_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('review_id', name=op.f('reviews_pkey'))
    )
    op.create_table('requests',
    sa.Column('request_id', sa.INTEGER(), server_default=sa.text("nextval('requests_request_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sub_category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('request_status_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], name='requests_client_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['request_status_id'], ['request_status.request_status_id'], name='requests_request_status_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sub_category_id'], ['sub_categories.sub_category_id'], name='requests_sub_category_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('request_id', name='requests_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_status',
    sa.Column('service_status_id', sa.INTEGER(), server_default=sa.text("nextval('service_status_service_status_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('service_status_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('service_status_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('service_status_id', name='service_status_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('proposals',
    sa.Column('proposal_id', sa.INTEGER(), server_default=sa.text("nextval('proposals_proposal_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('request_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('freelancer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('proposal_status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.user_id'], name='proposals_freelancer_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['proposal_status_id'], ['proposal_status.proposal_status_id'], name='proposals_proposal_status_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['request_id'], ['requests.request_id'], name='proposals_request_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('proposal_id', name='proposals_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('utxos',
    sa.Column('utxo_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('script_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tx_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('tx_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('datum', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('value_lovelace', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('token_unit', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('token_quantity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('creation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('spent', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('spent_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name=op.f('utxos_milestone_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['script_id'], ['scripts.script_id'], name=op.f('utxos_script_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('utxo_id', name=op.f('utxos_pkey'))
    )
    op.create_table('users',
    sa.Column('user_id', sa.INTEGER(), server_default=sa.text("nextval('users_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('wallet_public_address', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('wallet_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.role_id'], name='users_role_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['wallet_type_id'], ['wallet_types.wallet_type_id'], name='users_wallet_type_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    sa.UniqueConstraint('wallet_public_address', name='users_wallet_public_address_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('profiles',
    sa.Column('profile_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('bio', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('profile_picture_identifier', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('profiles_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('profile_id', name=op.f('profiles_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('profiles_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('services',
    sa.Column('service_id', sa.INTEGER(), server_default=sa.text("nextval('services_service_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sub_category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('freelancer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('service_status_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.user_id'], name='services_freelancer_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['service_status_id'], ['service_status.service_status_id'], name='services_service_status_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sub_category_id'], ['sub_categories.sub_category_id'], name='services_sub_category_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('service_id', name='services_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('scripts',
    sa.Column('script_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('creation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('script_id', name=op.f('scripts_pkey')),
    sa.UniqueConstraint('address', name=op.f('scripts_address_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('proposal_milestone_association',
    sa.Column('proposal_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name=op.f('proposal_milestone_association_milestone_id_fkey')),
    sa.ForeignKeyConstraint(['proposal_id'], ['proposals.proposal_id'], name=op.f('proposal_milestone_association_proposal_id_fkey'))
    )
    op.create_table('milestones',
    sa.Column('milestone_id', sa.INTEGER(), server_default=sa.text("nextval('milestones_milestone_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('freelancer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('milestone_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reward_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('client_approved', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('freelancer_approved', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('milestone_status_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], name='milestones_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.user_id'], name='milestones_freelancer_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['milestone_status_id'], ['milestone_status.milestone_status_id'], name='milestones_milestone_status_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('milestone_id', name='milestones_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sub_categories',
    sa.Column('sub_category_id', sa.INTEGER(), server_default=sa.text("nextval('sub_categories_sub_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sub_category_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('sub_category_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], name='sub_categories_category_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('sub_category_id', name='sub_categories_pkey'),
    sa.UniqueConstraint('sub_category_name', name='sub_categories_sub_category_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('milestone_status',
    sa.Column('milestone_status_id', sa.INTEGER(), server_default=sa.text("nextval('milestone_status_milestone_status_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('milestone_status_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('milestone_status_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('milestone_status_id', name='milestone_status_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_milestone_association',
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name=op.f('service_milestone_association_milestone_id_fkey')),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], name=op.f('service_milestone_association_service_id_fkey'))
    )
    op.create_table('proposal_status',
    sa.Column('proposal_status_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('proposal_status_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('proposal_status_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('proposal_status_id', name=op.f('proposal_status_pkey'))
    )
    op.create_table('transactions',
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('token_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('receiver_address', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('freelancer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('creation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('edition_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], name=op.f('transactions_client_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['freelancer_id'], ['users.user_id'], name=op.f('transactions_freelancer_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name=op.f('transactions_milestone_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('transaction_id', name=op.f('transactions_pkey'))
    )
    op.create_table('request_milestone_association',
    sa.Column('request_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('milestone_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['milestone_id'], ['milestones.milestone_id'], name=op.f('request_milestone_association_milestone_id_fkey')),
    sa.ForeignKeyConstraint(['request_id'], ['requests.request_id'], name=op.f('request_milestone_association_request_id_fkey'))
    )
    op.create_table('wallet_types',
    sa.Column('wallet_type_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('wallet_type_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('wallet_type_id', name=op.f('wallet_types_pkey'))
    )
    # ### end Alembic commands ###
